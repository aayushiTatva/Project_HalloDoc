@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
    Layout = "~/Views/Shared/_LayoutTask.cshtml";
}
@model Assignment.DBEntity.ViewModels.TaskModel
<div class="container-fluid mt-4">
    <div class="row ">
        <div class="card shadow">
            <div class="card-body border-0">
                <div class="row d-flex">
                    <div class="col-md-6 col-sm-12 d-flex">
                        <a class="btn border text-black shadow-none justify-content-end" data-bs-toggle="modal" data-bs-target="#AddEditTask" style="background-color:#7CA28D">+ Add Task</a>
                    </div>
                    <div class="search col-md-6 ">
                        <div class="search col-md-6 mb-1 float-end">
                            <input onkeypress="SearchInput()" id="SearchInput" type="text" class="form-control" placeholder="Search">
                        </div>
                    </div>
                </div>

                <div class="table-responsive">
                    <table class="table table-responsive mt-3 mb-0">
                        <thead>
                            <tr>
                                <th scope="col">Task Id</th>
                                <th scope="col">Task Name</th>
                                <th scope="col">Assignee</th>
                                <th scope="col">Description</th>
                                <th scope="col">Due Date</th>
                                <th scope="col">Category</th>
                                <th scope="col">City</th>
                                <th scope="col">Actions</th>
                            </tr>
                        </thead>
                        <tbody class="table-group-divider" id="taskbody">
                            @foreach (var (item, index) in Model.TaskList.Select((item, index) => (item, index)))
                            {
                            <tr>
                                <td scope="row">
                                    @item.TaskId
                                </td>
                                <td>@item.TaskName</td>
                                <td>@item.Assignee</td>
                                <td>@item.Description</td>
                                <td>@item.DueDate.Date</td>
                                <td>@item.CategoryName</td>
                                <td>@item.City</td>
                                <td>
                                    <button onclick="modal_Case(@index)" data-bs-id="@item.TaskId" data-bs-toggle="modal" data-bs-target="#EditTask" id="@item.TaskId" style="background-color:#7CA28D" class="btn border text-black shadow-none justify-content-end taskModal">
                                        Edit
                                    </button>
                                    <a class="btn btn-danger mx-3 shadow-none flow-start deletebtn mb-2" asp-controller="Task" asp-action="DeleteTask" asp-route-Id="@item.TaskId">
                                        Delete
                                    </a>

                                </td>
                            </tr>
                           }
                        </tbody>
                    </table>
                </div>
                <nav aria-label="Page navigation example" id="paginationTasks">
                    <div class="d-flex justify-content-between mx-2 mt-3">
                        <div>
                            @if (Model.TotalPages == 0)
                            {
                                Model.CurrentPage = 0;
                            }
                            Page @Model.CurrentPage / @Model.TotalPages
                        </div>
                        <div>
                            <ul class="pagination pagination-container">
                                @{
                                    int i;
                                    <form id="paginationform" asp-controller="Home" asp-action="Index" novalidate="novalidate" class="d-flex">
                                        <input type="hidden" asp-for="PageSize" />
                                        <input type="hidden" asp-for="CurrentPage" id="currentpagevalue" />

                                        @if (@Model.CurrentPage > 1)
                                        {
                                    <li class="page-item me-2">
                                        <button class="btn shadow-none" onclick="setpagenumber('previous')">&lt;</button>
                                    </li>
                                        }
                                        else
                                        {
                                    <li class="me-2 page-item">
                                        <button class="disabled btn">&lt;</button>
                                    </li>
                                        }
                                        @for (i = 1; i <= @Model.TotalPages; i++)
                                        {
                                        <li class="page-item me-2">
                                            <button class="@(i == @Model.CurrentPage ? "activePage" : "") btn shadow-none" onclick="setpagenumber(@i)">@i</button>
                                        </li>
                                        }
                                        @if (@Model.TotalPages > @Model.CurrentPage)
                                        {
                                        <li class="page-item me-2">
                                            <button class="btn shadow-none" onclick="setpagenumber('next')">&gt;</button>
                                        </li>
                                        }
                                        else
                                        {
                                        <li class="page-item">
                                            <button class="btn disabled">&gt;</button>
                                        </li>
                                        }
                                        </form>
                                }
                            </ul>
                        </div>
                    </div>
                </nav>
            </div>
        </div>
    </div>
</div>
<script>
    function modal_Case(id) {
        var modeldata = @Html.Raw(Json.Serialize(Model));
        document.getElementById('Id_Input_ModelEditTask').value = modeldata.list[id].taskId;
    }
    $(document).ready(function () {
        $('.taskModal').on('click', function () {
            var taskid = $(this).attr('id');
            $.ajax({
                url: '/Task/ViewTask',
                data: { taskid: taskid },
                success: function (response) {
                    $('#TaskName_EditTask').val(response.taskName);
                    $('#Assignee_EditTask').val(response.assignee);
                    $('#Description_EditTask').val(response.description);
                    $('#DueDate_EditTask').val(response.modalDate);
                    $('#City_EditTask').val(response.city);
                    $('#Category_EditTask').val(response.categoryId);
                    $('#TaskId_EditTask').val(response.taskId);
                },
                error: function (xhr, status, error) {
                    console.error(error);
                }
            });
        });
    });
   function setpagenumber(e) {
        if (e == 'previous') {
            var cp = @Model.CurrentPage-1;
            $('#currentpagevalue').val(cp);
        }
        else if (e == 'next') {
            var cp = @Model.CurrentPage + 1;
            $('#currentpagevalue').val(cp);
        }
        else {
            $('#currentpagevalue').val(e);
        }
        $("#paginationform").submit();

        console.log("Hello pagination");
        }

</script>